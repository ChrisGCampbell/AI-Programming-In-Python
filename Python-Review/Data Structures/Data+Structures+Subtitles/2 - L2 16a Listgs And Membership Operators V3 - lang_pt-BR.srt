1
00:00:00,629 --> 00:00:02,333
LISTAS
E OPERADORES DE ASSOCIAÇÃO

2
00:00:02,366 --> 00:00:04,700
Vimos pedaços individuais
de dados,

3
00:00:04,733 --> 00:00:06,900
como uma string e um número.

4
00:00:06,933 --> 00:00:08,099
Eles são bons,

5
00:00:08,132 --> 00:00:11,132
mas a capacidade do Python
de compor programas poderosos

6
00:00:11,165 --> 00:00:12,466
é amplificada

7
00:00:12,499 --> 00:00:15,733
quando trabalhamos
com os contêineres de dados,

8
00:00:15,766 --> 00:00:17,566
que contêm outros tipos
de dados

9
00:00:17,599 --> 00:00:19,700
e até mesmo
outros contêineres.

10
00:00:19,733 --> 00:00:24,166
Vejamos nosso primeiro
contêiner Python: a lista.

11
00:00:24,199 --> 00:00:26,999
Ela é uma estrutura de dados
no Python

12
00:00:27,032 --> 00:00:30,533
que é uma sequência ordenada
mutável de elementos.

13
00:00:30,566 --> 00:00:33,300
Falaremos mais
sobre a parte mutável depois.

14
00:00:35,000 --> 00:00:38,099
Esse código define
a variável months,

15
00:00:38,132 --> 00:00:40,299
que contém uma lista
de strings.

16
00:00:40,332 --> 00:00:43,434
Cada elemento da lista
é um mês do ano.

17
00:00:44,067 --> 00:00:46,633
Uma lista é definida
com colchetes

18
00:00:46,666 --> 00:00:51,132
e sempre contém dados
separados por vírgulas.

19
00:00:51,165 --> 00:00:55,933
Os dados podem ser uma mistura
de qualquer tipo de dados.

20
00:00:55,966 --> 00:01:00,366
A lista possui uma ordem ou,
melhor dizendo, é ordenada.

21
00:01:00,399 --> 00:01:03,266
Podemos procurar
elementos individuais na lista

22
00:01:03,299 --> 00:01:04,967
pelo índice deles.

23
00:01:05,000 --> 00:01:08,032
Podemos procurar por valores
desta forma:

24
00:01:08,065 --> 00:01:11,600
digitamos o nome da lista
seguido por colchetes,

25
00:01:11,633 --> 00:01:15,933
com um inteiro indicando
a posição dele ou o índice.

26
00:01:15,966 --> 00:01:19,366
Perceba que o primeiro elemento
da lista, "January",

27
00:01:19,399 --> 00:01:23,600
está localizado no índice 0,
e não no índice 1.

28
00:01:23,633 --> 00:01:26,800
Muitas linguagens de programação
seguem essa convenção.

29
00:01:26,833 --> 00:01:29,232
Chamamos isso de "indexação
a partir do zero".

30
00:01:29,265 --> 00:01:31,833
Se isso for confuso,

31
00:01:31,866 --> 00:01:33,433
pense da seguinte forma:

32
00:01:33,466 --> 00:01:37,066
o índice de um elemento
descreve a distância dele

33
00:01:37,099 --> 00:01:39,066
em relação ao início da lista.

34
00:01:39,099 --> 00:01:43,233
O primeiro está a zero elemento
de distância do início,

35
00:01:43,266 --> 00:01:47,066
o segundo está a um elemento
de distância, e assim por diante.

36
00:01:47,099 --> 00:01:50,032
Também podemos indexar
a partir do fim da lista,

37
00:01:50,065 --> 00:01:53,333
e não a partir do início,
como fizemos até agora.

38
00:01:53,366 --> 00:01:56,032
Para isso, utilizamos
índices negativos.

39
00:01:56,065 --> 00:01:59,800
Por exemplo, podemos pegar
o último mês do ano.

40
00:01:59,833 --> 00:02:03,867
O índice -1 faz referência
ao último elemento da lista,

41
00:02:03,900 --> 00:02:08,099
-2, ao penúltimo,
e assim por diante.

42
00:02:08,132 --> 00:02:11,600
Perceba que embora zero
seja o primeiro índice da lista,

43
00:02:11,633 --> 00:02:13,766
zero negativo
não será o último,

44
00:02:13,799 --> 00:02:15,900
e isso pode ser
um pouco confuso.

45
00:02:15,933 --> 00:02:20,833
Ao tentar acessar um índice
que não existe em uma lista,

46
00:02:20,866 --> 00:02:23,900
você receberá uma lista
de exceções de índice.

47
00:02:23,933 --> 00:02:28,099
É assim que o Python informa
que tentamos acessar um índice

48
00:02:28,132 --> 00:02:30,366
que não está na lista.

49
00:02:30,399 --> 00:02:33,433
Como o índice 25 não existe,

50
00:02:33,466 --> 00:02:35,501
recebemos este erro.

51
00:02:36,167 --> 00:02:38,500
Os erros de índice
são algo comum,

52
00:02:38,533 --> 00:02:41,633
principalmente quando não estamos
acostumados a fazer isso.

53
00:02:41,666 --> 00:02:44,733
Podemos ver muitos erros
no começo.

54
00:02:44,766 --> 00:02:47,666
A razão mais comum
para um erro de índice

55
00:02:47,699 --> 00:02:50,600
é utilizar um índice
que perde por 1,

56
00:02:50,633 --> 00:02:54,299
mas pode haver outros motivos
para um erro.

57
00:02:54,332 --> 00:02:57,333
É sempre bom utilizar
a função print

58
00:02:57,366 --> 00:02:59,833
e depurar
com um pequeno exemplo.

59
00:02:59,866 --> 00:03:03,667
Isso informará se o índice
está errado e por qual valor.

